# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Nomeroff Net CI GPU Testing

on:
  pull_request:
    branches: [  master, v3.0, v3.1 ]
    paths:
      - 'nomeroff_net/**'
      - 'examples/ju/inference/**'
      - 'examples/ju/train/**'
      - 'examples/py/inference/**'

jobs:
  gpu-tests:
    runs-on: self-hosted

    # Timeout: https://stackoverflow.com/a/59076067/4521646
    timeout-minutes: 120

    steps:
    - uses: actions/checkout@v2

    # Note: This uses an internal pip API and may not always work
    # https://github.com/actions/cache/blob/master/examples.md#multiple-oss-in-a-workflow
    - name: Get pip cache
      env:
        repo_token: ${{ secrets.GITHUB_TOKEN }}
      id: pip-cache
      run: |
        python -c "from pip._internal.locations import USER_CACHE_DIR; print('::set-output name=dir::' + USER_CACHE_DIR)"

    - name: Cache pip
      env:
        repo_token: ${{ secrets.GITHUB_TOKEN }}
      uses: actions/cache@v2.1.7
      with:
        path: ${{ steps.pip-cache.outputs.dir }}
        key: ${{ runner.os }}-${{ matrix.python-version }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.python-version }}-pip-

    - name: Install dependencies
      env:
        repo_token: ${{ secrets.GITHUB_TOKEN }}
      run: |

        apt-get update
        apt-get install -y libopencv-dev
        apt-get install -y libturbojpeg
        apt-get install -y jupyter-nbconvert
        apt-get install -y python3-notebook
        apt-get install -y jupyter-notebook

        python -m pip install --upgrade pip

        pip install -r requirements.txt
        pip install torch==1.11.0+cu115 torchvision==0.12.0+cu115 -f https://download.pytorch.org/whl/torch_stable.html
        pip3 install tqdm==4.40.0

        # extras
        pip install setuptools wheel pytest

        python --version
        pip --version
        pip list
      shell: bash

    - name: Tests workflow
      env:
        repo_token: ${{ secrets.GITHUB_TOKEN }}
      run: |

        # test train examples ocr
        CUDA_VISIBLE_DEVICES=0 jupyter nbconvert --ExecutePreprocessor.timeout=6000 --execute --to html examples/ju/train/ocr/by.ipynb
        CUDA_VISIBLE_DEVICES=0 jupyter nbconvert --ExecutePreprocessor.timeout=6000 --execute --to html examples/ju/train/ocr/eu.ipynb
        CUDA_VISIBLE_DEVICES=0 jupyter nbconvert --ExecutePreprocessor.timeout=6000 --execute --to html examples/ju/train/ocr/ge.ipynb
        CUDA_VISIBLE_DEVICES=0 jupyter nbconvert --ExecutePreprocessor.timeout=6000 --execute --to html examples/ju/train/ocr/kg.ipynb
        CUDA_VISIBLE_DEVICES=0 jupyter nbconvert --ExecutePreprocessor.timeout=6000 --execute --to html examples/ju/train/ocr/kz.ipynb
        CUDA_VISIBLE_DEVICES=0 jupyter nbconvert --ExecutePreprocessor.timeout=6000 --execute --to html examples/ju/train/ocr/ua.ipynb
        CUDA_VISIBLE_DEVICES=0 jupyter nbconvert --ExecutePreprocessor.timeout=6000 --execute --to html examples/ju/train/ocr/ua-1995.ipynb
        CUDA_VISIBLE_DEVICES=0 jupyter nbconvert --ExecutePreprocessor.timeout=6000 --execute --to html examples/ju/train/ocr/su.ipynb
        CUDA_VISIBLE_DEVICES=0 jupyter nbconvert --ExecutePreprocessor.timeout=6000 --execute --to html examples/ju/train/ocr/ru.ipynb

        # test train examples classification
        CUDA_VISIBLE_DEVICES=0 jupyter nbconvert --ExecutePreprocessor.timeout=6000 --execute --to html examples/ju/train/classification/options-base-count_lines-train.ipynb
        CUDA_VISIBLE_DEVICES=0 jupyter nbconvert --ExecutePreprocessor.timeout=6000 --execute --to html examples/ju/train/classification/options-base-train.ipynb
        CUDA_VISIBLE_DEVICES=0 jupyter nbconvert --ExecutePreprocessor.timeout=6000 --execute --to html examples/ju/train/classification/options-custom-train.ipynb
        CUDA_VISIBLE_DEVICES=0 jupyter nbconvert --ExecutePreprocessor.timeout=6000 --execute --to html examples/ju/train/classification/options-train.ipynb

        # test train examples object detection
        CUDA_VISIBLE_DEVICES=0 jupyter nbconvert --ExecutePreprocessor.timeout=6000 --execute --to html examples/ju/train/object_detection/yolov5-train.ipynb

        # test python inference examples
        CUDA_VISIBLE_DEVICES=0 python examples/py/inference/get-started-demo.py
        CUDA_VISIBLE_DEVICES=0 python examples/py/inference/get-started-tiny-demo.py
        CUDA_VISIBLE_DEVICES=0 python examples/py/inference/number-plate-filling-demo.py
        CUDA_VISIBLE_DEVICES=0 python examples/py/inference/number-plate-recognition-multiline-demo.py

        # test jupyter inference examples
        CUDA_VISIBLE_DEVICES=0 jupyter nbconvert --ExecutePreprocessor.timeout=6000 --execute --to html examples/ju/inference/custom-options-model-demo.ipynb
        CUDA_VISIBLE_DEVICES=0 jupyter nbconvert --ExecutePreprocessor.timeout=6000 --execute --to html examples/ju/inference/get-started-demo.ipynb
        CUDA_VISIBLE_DEVICES=0 jupyter nbconvert --ExecutePreprocessor.timeout=6000 --execute --to html examples/ju/inference/get-started-tiny-demo.ipynb
        CUDA_VISIBLE_DEVICES=0 jupyter nbconvert --ExecutePreprocessor.timeout=6000 --execute --to html examples/ju/inference/number-plate-bbox-filling.ipynb
        CUDA_VISIBLE_DEVICES=0 jupyter nbconvert --ExecutePreprocessor.timeout=6000 --execute --to html examples/ju/inference/number-plate-keypoints-filling.ipynb
        CUDA_VISIBLE_DEVICES=0 jupyter nbconvert --ExecutePreprocessor.timeout=6000 --execute --to html examples/ju/inference/number-plate-recognition-multiline-demo.ipynb
        CUDA_VISIBLE_DEVICES=0 jupyter nbconvert --ExecutePreprocessor.timeout=6000 --execute --to html examples/ju/inference/get-started-demo-ocr-custom.ipynb

        # test python benchmarks examples
        CUDA_VISIBLE_DEVICES=0 python examples/py/benchmark/accuracy-test.py
        CUDA_VISIBLE_DEVICES=0 python examples/py/benchmark/runtime-test.py

        # test jupyter benchmarks examples
        CUDA_VISIBLE_DEVICES=0 jupyter nbconvert --ExecutePreprocessor.timeout=6000 --execute --to html examples/ju/benchmark/accuracy-test.ipynb
        CUDA_VISIBLE_DEVICES=0 jupyter nbconvert --ExecutePreprocessor.timeout=6000 --execute --to html examples/ju/benchmark/accuracy-test-custom.ipynb
        CUDA_VISIBLE_DEVICES=0 jupyter nbconvert --ExecutePreprocessor.timeout=6000 --execute --to html examples/ju/benchmark/accuracy-test-multiline.ipynb
        CUDA_VISIBLE_DEVICES=0 jupyter nbconvert --ExecutePreprocessor.timeout=6000 --execute --to html examples/ju/benchmark/runtime-test.ipynb
        CUDA_VISIBLE_DEVICES=0 jupyter nbconvert --ExecutePreprocessor.timeout=6000 --execute --to html examples/ju/benchmark/runtime-test-multiline.ipynb

        # test nnmodels
        CUDA_VISIBLE_DEVICES=0 python3 -m nomeroff_net.nnmodels.numberplate_classification_model  -f nomeroff_net/nnmodels/numberplate_classification_model.py
        CUDA_VISIBLE_DEVICES=0 python3 -m nomeroff_net.nnmodels.numberplate_options_model -f nomeroff_net/nnmodels/numberplate_options_model.py
        CUDA_VISIBLE_DEVICES=0 python3 -m nomeroff_net.nnmodels.fraud_numberpate_model -f nomeroff_net/nnmodels/fraud_numberpate_options.py
        CUDA_VISIBLE_DEVICES=0 python3 -m nomeroff_net.nnmodels.numberplate_inverse_model -f nomeroff_net/nnmodels/numberplate_inverse_model.py
        CUDA_VISIBLE_DEVICES=0 python3 -m nomeroff_net.nnmodels.numberplate_orientation_model -f nomeroff_net/nnmodels/numberplate_orientation_model.py
        CUDA_VISIBLE_DEVICES=0 python3 -m nomeroff_net.nnmodels.ocr_model -f nomeroff_net/nnmodels/ocr_model.py

        # test ocrs
        # TODO: make runnable for GPU
        CUDA_VISIBLE_DEVICES=0 python3 -m nomeroff_net.text_detectors.am -f nomeroff_net/text_detectors/am.py
        CUDA_VISIBLE_DEVICES=0 python3 -m nomeroff_net.text_detectors.by -f nomeroff_net/text_detectors/by.py
        CUDA_VISIBLE_DEVICES=0 python3 -m nomeroff_net.text_detectors.eu -f nomeroff_net/text_detectors/eu.py
        CUDA_VISIBLE_DEVICES=0 python3 -m nomeroff_net.text_detectors.eu_ua_1995 -f nomeroff_net/text_detectors/eu_ua_1995.py
        CUDA_VISIBLE_DEVICES=0 python3 -m nomeroff_net.text_detectors.eu_ua_2004_2015 -f nomeroff_net/text_detectors/eu_ua_2004_2015.py
        CUDA_VISIBLE_DEVICES=0 python3 -m nomeroff_net.text_detectors.ge -f nomeroff_net/text_detectors/ge.py
        CUDA_VISIBLE_DEVICES=0 python3 -m nomeroff_net.text_detectors.kg -f nomeroff_net/text_detectors/kg.py
        CUDA_VISIBLE_DEVICES=0 python3 -m nomeroff_net.text_detectors.kz -f nomeroff_net/text_detectors/kz.py
        CUDA_VISIBLE_DEVICES=0 python3 -m nomeroff_net.text_detectors.ru -f nomeroff_net/text_detectors/ru.py
        CUDA_VISIBLE_DEVICES=0 python3 -m nomeroff_net.text_detectors.su -f nomeroff_net/text_detectors/su.py

      shell: bash
